/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(11);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(3);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _quiz = __webpack_require__(4);

	var _quiz2 = _interopRequireDefault(_quiz);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	window.ProtoGraph = window.ProtoGraph || {};
	window.ProtoGraph.Card = window.ProtoGraph.Card || {};

	if (!NodeList.prototype.forEach) {
	  NodeList.prototype.forEach = Array.prototype.forEach;
	}

	ProtoGraph.Card.toQuiz = function () {
	  this.cardType = 'QuizApp';
	};

	ProtoGraph.Card.toQuiz.prototype.init = function (options) {
	  this.options = options;
	};

	ProtoGraph.Card.toQuiz.prototype.getData = function (data) {
	  return this.containerInstance.exportData();
	};

	ProtoGraph.Card.toQuiz.prototype.renderLaptop = function (data) {
	  var _this = this;

	  this.mode = 'laptop';
	  _reactDom2.default.render(_react2.default.createElement(_quiz2.default, {
	    dataURL: this.options.data_url,
	    schemaURL: this.options.schema_url,
	    configURL: this.options.configuration_url,
	    configSchemaURL: this.options.configuration_schema_url,
	    uiSchemaURL: this.options.ui_schema_url,
	    mode: this.mode,
	    ref: function ref(e) {
	      _this.containerInstance = _this.containerInstance || e;
	    } }), this.options.selector);
	};

	ProtoGraph.Card.toQuiz.prototype.renderMobile = function (data) {
	  var _this2 = this;

	  this.mode = 'mobile';
	  _reactDom2.default.render(_react2.default.createElement(_quiz2.default, {
	    dataURL: this.options.data_url,
	    schemaURL: this.options.schema_url,
	    configURL: this.options.configuration_url,
	    configSchemaURL: this.options.configuration_schema_url,
	    uiSchemaURL: this.options.ui_schema_url,
	    mode: this.mode,
	    ref: function ref(e) {
	      _this2.containerInstance = _this2.containerInstance || e;
	    } }), this.options.selector);
	};

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = React;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = ReactDOM;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(3);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _axios = __webpack_require__(5);

	var _axios2 = _interopRequireDefault(_axios);

	var _utility = __webpack_require__(6);

	var _utility2 = _interopRequireDefault(_utility);

	var _touch = __webpack_require__(7);

	var _touch2 = _interopRequireDefault(_touch);

	var _quizIntroduction = __webpack_require__(8);

	var _quizIntroduction2 = _interopRequireDefault(_quizIntroduction);

	var _quizConclusion = __webpack_require__(9);

	var _quizConclusion2 = _interopRequireDefault(_quizConclusion);

	var _questionCards = __webpack_require__(10);

	var _questionCards2 = _interopRequireDefault(_questionCards);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Quiz = function (_React$Component) {
	  _inherits(Quiz, _React$Component);

	  function Quiz(props) {
	    _classCallCheck(this, Quiz);

	    var _this = _possibleConstructorReturn(this, (Quiz.__proto__ || Object.getPrototypeOf(Quiz)).call(this, props));

	    var stateVar = {
	      fetchingData: true,
	      dataJSON: {
	        data: {},
	        mandatory_config: {}
	      },
	      schemaJSON: {},
	      optionalConfigJSON: {},
	      optionalConfigSchemaJSON: {},
	      uiSchemaJSON: {},
	      languageTexts: {},
	      totalQuestions: 0,
	      score: 0,
	      rightCounter: 0,
	      sliderValue: 0,
	      timerCountValue: 10,
	      timePerQuestion: 10,
	      questionScore: 1,
	      timer: undefined,
	      revisitingAnswers: false,
	      isMobile: _this.props.mode === 'mobile' ? true : false
	    };

	    if (_this.props.dataJSON) {
	      stateVar.fetchingData = false;
	      stateVar.dataJSON = _this.props.dataJSON;
	    }

	    if (_this.props.schemaJSON) {
	      stateVar.schemaJSON = _this.props.schemaJSON;
	    }

	    if (_this.props.optionalConfigJSON) {
	      stateVar.optionalConfigJSON = _this.props.optionalConfigJSON;
	    }

	    if (_this.props.optionalConfigSchemaJSON) {
	      stateVar.optionalConfigSchemaJSON = _this.props.optionalConfigSchemaJSON;
	    }

	    if (_this.props.totalQuestions) {
	      stateVar.totalQuestions = _this.props.totalQuestions;
	    }

	    if (_this.props.totalCards) {
	      stateVar.totalCards = _this.props.totalCards;
	    }

	    if (_this.props.languageTexts) {
	      stateVar.languageTexts = _this.props.languageTexts;
	    }

	    if (_this.props.timePerQuestion) {
	      stateVar.timePerQuestion = _this.props.timePerQuestion;
	    }

	    if (_this.props.timerCountValue) {
	      stateVar.timerCountValue = _this.props.timerCountValue;
	    }

	    _this.state = stateVar;
	    return _this;
	  }

	  _createClass(Quiz, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      console.log(this.state.fetchingData);
	      if (this.state.fetchingData) {
	        _axios2.default.all([_axios2.default.get(this.props.dataURL), _axios2.default.get(this.props.schemaURL), _axios2.default.get(this.props.configURL), _axios2.default.get(this.props.configSchemaURL), _axios2.default.get(this.props.uiSchemaURL)]).then(_axios2.default.spread(function (cardData, cardSchema, optionalConfig, optionalConfigSchema, uiSchema) {
	          var stateVar = {
	            fetchingData: false,
	            dataJSON: {
	              data: cardData.data.data,
	              mandatory_config: cardData.data.mandatory_config
	            },
	            schemaJSON: cardSchema.data,
	            optionalConfigJSON: optionalConfig.data,
	            optionalConfigSchemaJSON: optionalConfigSchema.data,
	            uiSchemaJSON: uiSchema.data
	          };

	          stateVar.dataJSON.data.result_card_data = stateVar.dataJSON.data.result_card_data ? _this2.processResultData(stateVar.dataJSON.data.result_card_data, stateVar.dataJSON.mandatory_config.quiz_type) : undefined;
	          stateVar.totalQuestions = stateVar.dataJSON.data.questions.length;
	          stateVar.totalCards = stateVar.totalQuestions + 2;
	          stateVar.languageTexts = _this2.getLanguageTexts(stateVar.dataJSON.mandatory_config.language);

	          if (stateVar.dataJSON.mandatory_config.time_per_question) {
	            stateVar.timePerQuestion = stateVar.dataJSON.mandatory_config.time_per_question;
	            stateVar.timerCountValue = stateVar.dataJSON.mandatory_config.time_per_question;
	          }
	          _this2.setState(stateVar);
	        }));
	      }
	    }
	  }, {
	    key: 'processResultData',
	    value: function processResultData(resultCardData, quizType) {
	      var processedData = [];
	      if (quizType === "scoring" && resultCardData[0].upper_limit_of_score_range) {
	        var groupedData = _utility2.default.groupBy(resultCardData, "upper_limit_of_score_range"),
	            keys = Object.keys(groupedData);

	        keys.forEach(function (key) {
	          var tempObj = {};
	          groupedData[key].forEach(function (datum) {
	            if (Object.keys(tempObj).length) {
	              tempObj.related_articles.push({
	                "related_article_links": datum.related_article_links,
	                "link_description": datum.link_description,
	                "link_image": datum.link_image
	              });
	            } else {
	              tempObj = {
	                "upper_limit_of_score_range": datum.upper_limit_of_score_range,
	                "message": datum.message,
	                "related_articles": [{
	                  "related_article_links": datum.related_article_links,
	                  "link_description": datum.link_description,
	                  "link_image": datum.link_image
	                }]
	              };
	            }
	          });
	          processedData.push(tempObj);
	        });

	        processedData.sort(function (a, b) {
	          return a.upper_limit_of_score_range - b.upper_limit_of_score_range;
	        });

	        return processedData;
	      } else {
	        processedData.push({
	          "message": resultCardData[0].message,
	          "related_articles": resultCardData.map(function (datum) {
	            return {
	              "related_article_links": datum.related_article_links,
	              "link_description": datum.link_description,
	              "link_image": datum.link_image
	            };
	          })
	        });
	        return processedData;
	      }
	    }
	  }, {
	    key: 'getLanguageTexts',
	    value: function getLanguageTexts(languageConfig) {
	      var language = languageConfig ? languageConfig : "english",
	          text_obj = void 0;

	      switch (language.toLowerCase()) {
	        case "hindi":
	          text_obj = {
	            question_title: "प्रश्न ",
	            ans_title: "उत्तर",
	            restart: 'फिर से शुरू करें ↺',
	            next: 'अगला प्रश्न ➜',
	            // swipe: 'अगले प्रश्न के लिए दाईं ओर स्वाइप करें ➜'हाँ या ना
	            swipe: 'अगले प्रश्न के लिए दाईं या बाईं ओर स्वाइप करें ➜'
	          };
	          break;
	        default:
	          text_obj = {
	            question_title: "Question ",
	            ans_title: "ANSWER",
	            restart: 'Good Job! Take the quiz again?',
	            next: 'Next Question ➜',
	            swipe: 'Swipe on the card to continue ➜'
	          };
	          break;
	      }

	      if ((typeof text_obj === 'undefined' ? 'undefined' : _typeof(text_obj)) === "object") {
	        text_obj.next = text_obj.next;
	        text_obj.restart = text_obj.restart;
	        text_obj.swipe = text_obj.swipe;
	      }

	      return text_obj;
	    }
	  }, {
	    key: 'formatNumber',
	    value: function formatNumber(n) {
	      return n > 9 ? "" + n : "0" + n;
	    }
	  }, {
	    key: 'startCountdown',
	    value: function startCountdown() {
	      var countdownValue = document.querySelector(".intro-card .countdown-counter"),
	          countdownInterval = void 0,
	          counter = 3;

	      countdownInterval = setInterval(function () {
	        counter--;
	        if (counter > 0) {
	          countdownValue.innerHTML = counter;
	        } else if (counter === 0) {
	          countdownValue.innerHTML = "GO";
	        } else {
	          clearInterval(countdownInterval);
	        }
	      }, 1000);
	    }

	    // EVENTS

	  }, {
	    key: 'startQuiz',
	    value: function startQuiz(e) {
	      var _this3 = this;

	      var button = document.querySelector(".intro-button"),
	          introCard = document.querySelector(".intro-card"),
	          introFront = document.querySelector(".intro-front"),
	          firstQCard = document.querySelector(".question-card[data-order='0']"),
	          totalQuestions = this.state.totalQuestions,
	          config = this.state.dataJSON.mandatory_config;

	      console.log(config);
	      introFront.style.display = "none";
	      document.querySelector(".intro-back").style.display = "block";

	      if (!this.state.isMobile) {
	        e.target.style.visibility = "hidden";
	        document.querySelector(".intro-cover").style.display = "block";
	      }
	      introCard.classList.add("clicked");

	      this.startCountdown();

	      setTimeout(function () {
	        introCard.style.top = "-1000px";
	        console.log(config.quiz_type === "scoring" && !config.flip_card, config.quiz_type, config.flip_card);
	        if (!(config.quiz_type === "scoring" && !config.flip_card)) {
	          firstQCard.querySelector(".back").style.display = "none";
	        }

	        firstQCard.classList.add("active");
	        firstQCard.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, 160, 0, 1)';

	        for (var i = 1; i < totalQuestions; i++) {
	          var card = document.querySelector('.question-card[data-order=\'' + i + '\']');

	          card.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - i * 20) + ', ' + i * 320 * -1 + ', ' + (1 + 0.08 * i) + ')';
	          if (i > 2) {
	            card.style.opacity = 0;
	          } else {
	            card.style.opacity = 1;
	          }
	        }

	        var conclusionCard = document.querySelector(".conclusion-card");
	        conclusionCard.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - totalQuestions * 20) + ', ' + totalQuestions * 320 * -1 + ', ' + (1 + 0.08 * totalQuestions) + ')';
	        if (totalQuestions < 3) {
	          conclusionCard.style.opacity = 1;
	        }

	        if (config.quiz_type === "scoring" && config.timer) {
	          _this3.setTimer();
	        }
	      }, 4000);

	      // if (ga) {
	      //   ga('pyktracker.send', 'event', {
	      //     eventCategory: 'onStart',
	      //     eventAction: 'click',
	      //     eventLabel: 0,
	      //     eventValue: 0
	      //     });
	      // }
	    }
	  }, {
	    key: 'optionClicked',
	    value: function optionClicked(e) {
	      var _this4 = this;

	      var qCard = document.querySelector(".question-card.active"),
	          config = this.state.dataJSON.mandatory_config,
	          totalQuestions = this.state.totalQuestions,
	          cardData = this.state.dataJSON.data.questions[+qCard.getAttribute('data-order')],
	          option = cardData.options[+e.target.getAttribute('data-option-id')];

	      if (config.quiz_type === "scoring") {
	        if (config.timer) {
	          this.clearTimer();
	          if (!config.flip_card) {
	            qCard.querySelector(".front .timer").style.display = "none";
	          }
	        }
	        if (option.right_or_wrong) {
	          this.setState(function (prevState, props) {
	            return {
	              right_counter: prevState.right_counter + 1,
	              score: prevState.score + _this4.state.questionScore
	            };
	          });
	          this.flashCorrectIndicator();
	        } else {
	          this.flashWrongIndicator();
	        }
	      }

	      this.addOptionBasedContent(option);

	      // if (ga) {
	      //   ga('pyktracker.send', 'event', {
	      //     eventCategory: 'onClickOfOption',
	      //     eventAction: 'click',
	      //     eventLabel: order_id + 1,
	      //     eventValue: option.option
	      //   });
	      // }
	    }
	  }, {
	    key: 'addOptionBasedContent',
	    value: function addOptionBasedContent(option) {
	      var qCard = document.querySelector(".question-card.active"),
	          parent = qCard.querySelector(".content"),
	          orderId = qCard.getAttribute("data-order"),
	          config = this.state.dataJSON.mandatory_config;

	      qCard.setAttribute('data-isNavigable', 1);
	      if (!(config.quiz_type === "scoring" && !config.flip_card)) {
	        var backDiv = parent.querySelector(".back");

	        if (config.quiz_type === "scoring") {
	          setTimeout(function () {
	            qCard.classList.add("clicked");
	            if (option.right_or_wrong) {
	              backDiv.querySelector(".wrong-answer").style.display = "none";
	              backDiv.querySelector(".correct-answer").classList.remove("deselected");
	            } else {
	              backDiv.querySelector(".wrong-answer").style.display = "block";
	              backDiv.querySelector('.wrong-answer .option-text').innerHTML = option.option;
	              backDiv.querySelector(".correct-answer").classList.add("deselected");
	            }
	            setTimeout(function () {
	              parent.querySelector(".front").style.display = "none";
	              backDiv.style.display = "block";
	            }, 100);
	          }, 1100);
	        } else {
	          qCard.classList.add("clicked");
	          setTimeout(function () {
	            parent.querySelector(".front").style.display = "none";
	            backDiv.style.display = "block";
	          }, 100);
	          backDiv.querySelector('.correct-answer').innerHTML = option.option;
	        }

	        if (option.gif_image) {
	          backDiv.querySelector(".gif-div").style.display = "block";
	          backDiv.querySelector(".gif").onload = function (e) {
	            var imgClientRect = e.target.offsetWidth,
	                imgContainerClientRect = backDiv.querySelector(".gif-div").offsetWidth,
	                idealImgWidth = imgContainerClientRect - 20;

	            if (imgClientRect >= idealImgWidth) {
	              e.target.style.width = idealImgWidth + "px";
	            }
	          };
	          backDiv.querySelector(".gif").setAttribute("src", option.gif_image);
	        } else {
	          backDiv.querySelector(".gif-div").style.display = "none";
	        }

	        if (option.fact) {
	          backDiv.querySelector(".fact").style.display = "block";
	          backDiv.querySelector(".fact").innerHTML = "";
	          backDiv.querySelector(".fact").appendChild(document.createTextNode(option.fact));
	        } else {
	          backDiv.querySelector(".fact").style.display = "none";
	        }
	      } else {
	        if (config.quiz_type === "scoring") {
	          var allOptions = parent.querySelectorAll(".option-div"),
	              frontDiv = parent.querySelector(".front");

	          for (var j = 0; j < allOptions.length; j++) {
	            allOptions[j].style.display = "none";
	          }
	          frontDiv.querySelector(".question").style.color = "#a8a8a8";
	          frontDiv.querySelector(".title").style.display = "block";
	          frontDiv.querySelector(".answers-container").style.display = "block";
	          if (this.state.isMobile) {
	            frontDiv.querySelector(".swipe-hint-container").style.display = "block";
	          } else {
	            frontDiv.querySelector(".next-container").style.display = "block";
	          }
	          if (option.right_or_wrong) {
	            frontDiv.querySelector(".wrong-answer").style.display = "none";
	            frontDiv.querySelector(".correct-answer").classList.remove("deselected");
	          } else {
	            frontDiv.querySelector(".wrong-answer").style.display = "block";
	            frontDiv.querySelector('.wrong-answer .option-text').innerHTML = option.option;
	            frontDiv.querySelector(".correct-answer").classList.add("deselected");
	          }
	        }
	      }
	    }
	  }, {
	    key: 'swipeCallback',
	    value: function swipeCallback(direction) {
	      if (this.state.revisitAnswers) {
	        return;
	      }

	      var qCard = document.querySelector(".question-card.active"),
	          orderId = +qCard.getAttribute("data-order"),
	          mainContainerWidth = document.querySelector(".main-container").offsetWidth,
	          nextCard = document.querySelector(".question-card[data-order='" + (orderId + 1) + "']"),
	          config = this.state.dataJSON.mandatory_config,
	          totalQuestions = this.state.totalQuestions,
	          backDiv = void 0;

	      if (!+qCard.getAttribute('data-isNavigable')) {
	        return;
	      }

	      if (nextCard) {
	        if (config.quiz_type === "scoring" && config.timer) {
	          this.setState({ timerCountValue: this.state.timePerQuestion });
	          this.setTimer();
	        }
	        nextCard.classList.add("active");
	        if (!(config.quiz_type === "scoring" && !config.flip_card)) {
	          backDiv = nextCard.querySelector(".back");
	          backDiv.style.display = "none";
	        }
	      } else {
	        document.querySelectorAll(".progress-bar").forEach(function (e) {
	          e.style.display = 'none';
	        });

	        if (!(config.quiz_type === "scoring" && !config.flip_card)) {
	          document.querySelectorAll('.question-card .back .swipe-hint-container').forEach(function (e) {
	            e.style.display = 'none';
	          });
	          document.querySelectorAll('.question-card .back .next-container').forEach(function (e) {
	            e.style.display = 'none';
	          });
	        } else {
	          document.querySelectorAll('.question-card .front .swipe-hint-container').forEach(function (e) {
	            e.style.display = 'none';
	          });
	          document.querySelectorAll('.question-card .front .next-container').forEach(function (e) {
	            e.style.display = 'none';
	          });
	        }
	      }

	      qCard.classList.remove("active");
	      switch (direction) {
	        case "left":
	          qCard.style.left = "-1000px";
	          break;
	        case "right":
	          qCard.style.left = mainContainerWidth + 500 + "px";
	          break;
	        case "up":
	          qCard.style.top = "-1000px";
	          break;
	      }

	      for (var i = orderId + 1; i < totalQuestions; i++) {
	        var card = document.querySelector('.question-card[data-order=\'' + i + '\']'),
	            _position = i - orderId - 1;

	        card.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - _position * 20) + ', ' + _position * 320 * -1 + ', ' + (1 + 0.08 * _position) + ')';
	        if (i - orderId < 4) {
	          card.style.opacity = 1;
	        }
	      }

	      var conclusionCard = document.querySelector(".conclusion-card"),
	          position = totalQuestions - orderId - 1;
	      console.log(position, totalQuestions, orderId);
	      conclusionCard.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - position * 20) + ', ' + position * 320 * -1 + ', ' + (1 + 0.08 * position) + ')';
	      if (totalQuestions - orderId < 4) {
	        conclusionCard.style.opacity = 1;
	      }

	      // if (ga) {
	      //   ga('pyktracker.send', 'event', {
	      //     eventCategory: 'onSwipeLeft',
	      //     eventAction: 'swipe',
	      //     eventLabel: order_id + 1,
	      //     eventValue: order_id + 1
	      //   });
	      // }
	    }
	  }, {
	    key: 'touchEndHandler',
	    value: function touchEndHandler(event) {
	      var _this5 = this;

	      _touch2.default.swipeEnd(event, function (e) {
	        console.log("swipeLeft");
	      }, function (e) {
	        console.log("swipeRight");
	      }, function (e) {
	        _this5.swipeCallback("up");
	      }, function (e) {
	        console.log("swipeRight");
	      });
	    }
	  }, {
	    key: 'resetQuiz',
	    value: function resetQuiz(e) {
	      this.setState({
	        right_counter: 0,
	        score: 0,
	        timer: undefined,
	        revisitAnswers: false
	      });

	      var qCard = document.querySelector(".question-card.active"),
	          allQuestions = document.querySelectorAll(".question-card"),
	          totalQuestions = this.state.totalQuestions,
	          config = this.state.dataJSON.mandatory_config,
	          i = void 0;

	      if (qCard) {
	        qCard.classList.remove("active");
	      }

	      for (i = 0; i < allQuestions.length; i++) {
	        var questionElement = allQuestions[i],
	            frontElement = questionElement.querySelector(".front"),
	            allOptions = void 0;

	        questionElement.classList.remove("clicked");
	        questionElement.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - i * 20) + ', ' + i * 320 * -1 + ', ' + (1 + 0.08 * i) + ')';
	        questionElement.style.display = "block";
	        frontElement.style.display = "block";
	        questionElement.style.top = "0px";
	        questionElement.setAttribute('data-isNavigable', 0);
	        if (i < 3) {
	          questionElement.style.opacity = 1;
	        } else {
	          questionElement.style.opacity = 0;
	        }

	        if (config.quiz_type === "scoring" && !config.flip_card) {
	          allOptions = frontElement.querySelectorAll(".option-div");
	          for (var j = 0; j < allOptions.length; j++) {
	            allOptions[j].style.display = "block";
	          }
	          frontElement.querySelector(".question").style.color = "black";
	          frontElement.querySelector(".title").style.display = "none";
	          frontElement.querySelector(".answers-container").style.display = "none";
	          if (this.state.isMobile) {
	            frontElement.querySelector(".swipe-hint-container").style.display = "none";
	          } else {
	            frontElement.querySelector(".next-container").style.display = "none";
	          }
	          if (config.timer) {
	            frontElement.querySelector(".timer").style.display = "block";
	            frontElement.querySelector(".timeout-msg").style.display = "none";
	          }
	        } else {
	          questionElement.querySelector('.back').style.display = 'none';
	          if (this.state.isMobile) {
	            var swipeHint = questionElement.querySelector(".back .swipe-hint-container");
	            swipeHint.style.display = "block";
	          } else {
	            var backNext = questionElement.querySelector(".back .next-container");
	            backNext.style.display = "block";
	          }
	          if (config.quiz_type === "scoring" && config.timer) {
	            questionElement.querySelector(".timeout-msg").style.display = "none";
	          }
	        }
	      }

	      document.querySelector(".question-card[data-order='0']").classList.add('active');

	      var conclusionCard = document.querySelector(".conclusion-card"),
	          progressBars = document.querySelectorAll(".progress-bar");

	      conclusionCard.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - (totalQuestions + 1) * 20) + ', ' + totalQuestions * 320 * -1 + ', ' + (1 + 0.08 * totalQuestions) + ')';
	      if (totalQuestions < 3) {
	        conclusionCard.style.opacity = 1;
	      } else {
	        conclusionCard.style.opacity = 0;
	      }

	      progressBars.forEach(function (e) {
	        e.style.display = 'block';
	      });

	      this.hideSlider();

	      if (config.quiz_type === "scoring" && config.timer) {
	        this.setState({ timerCountValue: this.state.timePerQuestion });
	        this.setTimer();
	      }

	      // if (ga) {
	      //   ga('pyktracker.send', 'event', {
	      //     eventCategory: 'onReset',
	      //     eventAction: 'click',
	      //     eventLabel: total_questions,
	      //     eventValue: total_questions
	      //   });
	      // }
	    }
	  }, {
	    key: 'revisitAnswers',
	    value: function revisitAnswers(e) {
	      this.showSlider();
	      this.slideCallback(0);
	      this.setState({ revisitAnswers: true });

	      //Question-Card
	      document.querySelectorAll('.question-card').forEach(function (e) {
	        e.setAttribute('data-isNavigable', 0);
	      });
	    }
	  }, {
	    key: 'slideCallback',
	    value: function slideCallback(value) {
	      this.setState({ sliderValue: value });
	      var slider = document.querySelector(".card-slider"),
	          sliderWidth = parseFloat(slider.style.width),
	          sliderHint = document.querySelector(".slider-hint"),
	          cardNum = document.querySelector(".slider-card-no"),
	          totalQuestions = this.state.totalQuestions,
	          percent = value / totalQuestions * 100,
	          conclusionCard = document.querySelector(".conclusion-card");

	      slider.style.background = "linear-gradient(to right, #D6EDFF 0%, #168BE5 " + percent + "%, #EEE " + percent + "%)";

	      if (isNaN(sliderWidth)) {
	        sliderWidth = 270;
	      }
	      cardNum.innerHTML = +value + 1 > totalQuestions ? "" : +value + 1;
	      cardNum.style.left = value / totalQuestions * (sliderWidth - 16) + 4 + "px";

	      var _loop = function _loop(i) {
	        var qCard = document.querySelector('.question-card[data-order=\'' + i + '\']');
	        if (i < value) {
	          qCard.style.top = "-1000px";
	        } else {
	          var position = i - value;
	          qCard.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - position * 20) + ', ' + i * 320 * -1 + ', ' + (1 + 0.08 * position) + ')';
	          qCard.style.display = "block";
	          // q_card.style.left = "50%";
	          qCard.style.top = "0px";
	          if (i - value < 3) {
	            setTimeout(function () {
	              qCard.style.opacity = 1;
	            }, 300);
	          } else {
	            setTimeout(function () {
	              qCard.style.opacity = 0;
	            }, 300);
	          }
	        }
	      };

	      for (var i = 0; i < totalQuestions; i++) {
	        _loop(i);
	      }

	      conclusionCard.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + value * 20 + ', ' + totalQuestions * 320 * -1 + ', ' + (1 + 0.08 * (totalQuestions - value)) + ')';
	      if (totalQuestions - value < 3) {
	        setTimeout(function () {
	          conclusionCard.style.opacity = 1;
	        }, 300);
	      } else {
	        setTimeout(function () {
	          conclusionCard.style.opacity = 0;
	        }, 300);
	      }
	    }
	  }, {
	    key: 'socialShare',
	    value: function socialShare(e) {
	      var conclusionCard = document.querySelector('.conclusion-card'),
	          conclusionFront = document.querySelector('.conclusion-front'),
	          conclusionBack = document.querySelector('.conclusion-back');

	      this.setState({ revisitAnswers: false });

	      if (this.state.revisitAnswers) {
	        this.hideSlider();
	      }
	      conclusionCard.classList.add("clicked");
	      setTimeout(function () {
	        conclusionFront.style.display = "none";
	      }, 300);
	      conclusionBack.style.display = "block";
	    }
	  }, {
	    key: 'setTimer',
	    value: function setTimer() {
	      var _this6 = this;

	      if (this.state.timer) {
	        this.clearTimer();
	      }
	      var counter = this.state.timePerQuestion,
	          activeQuestion = document.querySelector('.question-card.active'),
	          orderId = +activeQuestion.getAttribute('data-order-id'),
	          options = this.state.dataJSON.data.questions[orderId].options,
	          questionScore = counter;

	      this.setState({ questionScore: counter });
	      var timeInterval = setInterval(function () {
	        counter--;

	        _this6.setState({
	          timerCountValue: counter,
	          questionScore: counter
	        });

	        if (counter === 0) {
	          _this6.clearTimer();
	          _this6.flashTimeUpIndicator();
	          if (!_this6.state.dataJSON.mandatory_config.flip_card) {
	            document.querySelector(".question-card.active .front .timer").style.display = "none";
	          }
	          document.querySelector(".question-card.active .timeout-msg").style.display = "block";
	          _this6.addOptionBasedContent(options.filter(function (e) {
	            return e.right_or_wrong === true;
	          })[0]);
	        }
	      }, 1000);

	      this.setState({
	        timer: timeInterval
	      });
	    }
	  }, {
	    key: 'clearTimer',
	    value: function clearTimer() {
	      clearInterval(this.state.timer);
	      this.setState({
	        timer: undefined
	      });
	    }
	  }, {
	    key: 'calculateTime',
	    value: function calculateTime(seconds) {
	      var out = {
	        sec: 30,
	        min: 0
	      };
	      if (typeof seconds === "number") {
	        out.sec = this.formatNumber(seconds % 60);
	        out.min = this.formatNumber(Math.floor(seconds / 60) % 60);
	      }
	      return out;
	    }
	  }, {
	    key: 'sliderMousedownCallback',
	    value: function sliderMousedownCallback(e) {
	      e.stopPropagation();
	      document.querySelector(".slider-hint").style.visibility = "hidden";
	      document.querySelector(".slider-card-no").style.display = "block";
	    }
	  }, {
	    key: 'resetSlider',
	    value: function resetSlider(total_questions) {
	      var slider = document.querySelector(".card-slider");
	      slider.setAttribute("value", total_questions);
	      slider.style.background = "linear-gradient(to right, #D6EDFF 0%, #168BE5 100%, #EEE 100%)";
	    }
	  }, {
	    key: 'showSlider',
	    value: function showSlider() {
	      document.querySelector(".card-slider").style.display = "block";
	      document.querySelector(".slider-container").style.display = "block";
	    }
	  }, {
	    key: 'hideSlider',
	    value: function hideSlider() {
	      document.querySelector(".card-slider").style.display = "none";
	      document.querySelector(".slider-container").style.display = "none";
	    }
	  }, {
	    key: 'flashCorrectIndicator',
	    value: function flashCorrectIndicator() {
	      document.querySelector("#correct_indicator").style.display = "block";
	      setTimeout(function () {
	        document.querySelector("#correct_indicator").style.display = "none";
	      }, 1000);
	    }
	  }, {
	    key: 'flashWrongIndicator',
	    value: function flashWrongIndicator() {
	      document.querySelector("#wrong_indicator").style.display = "block";
	      setTimeout(function () {
	        document.querySelector("#wrong_indicator").style.display = "none";
	      }, 1000);
	    }
	  }, {
	    key: 'flashTimeUpIndicator',
	    value: function flashTimeUpIndicator() {
	      document.querySelector("#time_out_indicator").style.display = "block";
	      setTimeout(function () {
	        document.querySelector("#time_out_indicator").style.display = "none";
	      }, 1000);
	    }
	  }, {
	    key: 'renderIntroCard',
	    value: function renderIntroCard() {
	      var _this7 = this;

	      var buttonStyle = {},
	          introFrontStyle = {};

	      var data = this.state.dataJSON.data,
	          introCardConfigs = {
	        background_image: data.basic_datapoints.background_image.image,
	        quiz_title: data.basic_datapoints.quiz_title,
	        introduction: data.basic_datapoints.introduction,
	        start_button_text: data.basic_datapoints.start_button_text,
	        start_button_color: this.state.optionalConfigJSON.start_button_color,
	        start_button_text_color: this.state.optionalConfigJSON.start_button_text_color
	      };

	      introCardConfigs.start_button_color ? buttonStyle.backgroundColor = introCardConfigs.start_button_color : undefined;
	      introCardConfigs.start_button_text_color ? buttonStyle.color = introCardConfigs.start_button_text_color : undefined;

	      if (introCardConfigs.background_image) {
	        introFrontStyle.backgroundImage = "url(" + introCardConfigs.background_image + ")";
	      }

	      return _react2.default.createElement(
	        'div',
	        { className: 'intro-container' },
	        _react2.default.createElement(
	          'div',
	          { className: '' + (introCardConfigs.background_image || this.state.mode === 'laptop' ? 'intro-content with-image' : 'intro-content') },
	          _react2.default.createElement(
	            'div',
	            { className: '' + (introCardConfigs.background_image && this.state.isMobile ? 'intro-header with-image' : 'intro-header') },
	            introCardConfigs.quiz_title
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: '' + (introCardConfigs.background_image && this.state.isMobile ? 'intro-description with-image' : 'intro-description') },
	            introCardConfigs.introduction
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'intro-button-div' },
	            _react2.default.createElement(
	              'button',
	              { className: 'intro-button', onClick: function onClick(e) {
	                  return _this7.startQuiz(e);
	                }, style: buttonStyle },
	              introCardConfigs.start_button_text
	            )
	          )
	        ),
	        _react2.default.createElement('div', { className: 'intro-cover' })
	      );
	    }
	  }, {
	    key: 'renderCorrectIndicator',
	    value: function renderCorrectIndicator() {
	      return _react2.default.createElement(
	        'div',
	        { id: 'correct_indicator', className: 'correct-wrong-indicator correct-background' },
	        _react2.default.createElement(
	          'div',
	          { className: 'tick-background' },
	          _react2.default.createElement(
	            'span',
	            { className: 'correct-tick' },
	            '\u2714\uFE0E'
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'correct-wrong-text' },
	          'Correct'
	        )
	      );
	    }
	  }, {
	    key: 'renderWrongIndicator',
	    value: function renderWrongIndicator() {
	      return _react2.default.createElement(
	        'div',
	        { id: 'wrong_indicator', className: 'correct-wrong-indicator wrong-background' },
	        _react2.default.createElement(
	          'div',
	          { className: 'tick-background wrong-tick' },
	          _react2.default.createElement(
	            'span',
	            null,
	            '\u2717\uFE0E'
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'correct-wrong-text wrong' },
	          'Wrong'
	        )
	      );
	    }
	  }, {
	    key: 'renderTimeOutIndicator',
	    value: function renderTimeOutIndicator() {
	      return _react2.default.createElement(
	        'div',
	        { id: 'time_out_indicator', className: 'time-out-indicator' },
	        _react2.default.createElement(
	          'div',
	          { className: 'time-out-content' },
	          _react2.default.createElement(
	            'div',
	            { className: 'clock-icon' },
	            _react2.default.createElement('img', { src: 'src/images/clock-large.png' })
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'time-value' },
	            '00:00'
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'oops-msg' },
	            'Oops!'
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'times-up-msg' },
	            'Time\'s up'
	          )
	        )
	      );
	    }
	  }, {
	    key: 'renderMainContainerContent',
	    value: function renderMainContainerContent(cards) {
	      var _this8 = this;

	      var events = {
	        resetQuiz: function resetQuiz(e) {
	          return _this8.resetQuiz(e);
	        },
	        revisitAnswers: function revisitAnswers(e) {
	          return _this8.revisitAnswers(e);
	        },
	        socialShare: function socialShare(e) {
	          return _this8.socialShare(e);
	        }
	      },
	          data = this.state.dataJSON.data,
	          introCardConfigs = {
	        background_image: data.basic_datapoints.background_image.image,
	        quiz_title: data.basic_datapoints.quiz_title,
	        introduction: data.basic_datapoints.introduction,
	        start_button_text: data.basic_datapoints.start_button_text,
	        start_button_color: this.state.optionalConfigJSON.start_button_color,
	        start_button_text_color: this.state.optionalConfigJSON.start_button_text_color
	      },
	          cardConfigs = this.state.dataJSON.mandatory_config;
	      cardConfigs.share_msg = data.basic_datapoints.share_msg;
	      cardConfigs.share_link = data.basic_datapoints.share_link;

	      return _react2.default.createElement(
	        'div',
	        { className: 'quiz-container' },
	        _react2.default.createElement(
	          'div',
	          { className: 'quiz-content' },
	          (this.props.mode === 'laptop' || this.props.mode === 'edit') && this.renderIntroCard(),
	          _react2.default.createElement(
	            'div',
	            { id: 'main_container', className: 'main-container' },
	            _react2.default.createElement('div', { id: 'fb-root' }),
	            this.renderCorrectIndicator(),
	            this.renderWrongIndicator(),
	            this.renderTimeOutIndicator(),
	            _react2.default.createElement(_quizIntroduction2.default, {
	              introCardConfigs: introCardConfigs,
	              startQuiz: function startQuiz(e) {
	                return _this8.startQuiz(e);
	              },
	              totalQuestions: this.state.totalQuestions,
	              isMobile: this.state.isMobile
	            }),
	            _react2.default.createElement(
	              'div',
	              { id: 'card_stack', className: 'card-stack' },
	              cards,
	              this.state.isMobile ? _react2.default.createElement(
	                'div',
	                { className: 'help-text', id: 'help_text' },
	                this.state.languageTexts.swipe
	              ) : undefined
	            ),
	            _react2.default.createElement(_quizConclusion2.default, {
	              introCardConfigs: introCardConfigs,
	              cardConfigs: this.state.dataJSON.mandatory_config,
	              resultCardConfigs: this.state.dataJSON.data.result_card_data,
	              totalQuestions: this.state.totalQuestions,
	              score: this.state.score,
	              cardEvents: events
	            }),
	            _react2.default.createElement(
	              'div',
	              { className: 'slider-container' },
	              _react2.default.createElement(
	                'div',
	                { className: 'slider-hint' },
	                'use slider to move between questions'
	              ),
	              _react2.default.createElement(
	                'span',
	                { className: 'slider-card-no' },
	                '5'
	              ),
	              _react2.default.createElement('input', {
	                className: 'card-slider',
	                name: 'card_slider',
	                type: 'range',
	                step: '1',
	                min: '0',
	                max: this.state.totalQuestions,
	                value: this.state.sliderValue,
	                onInput: function onInput(e) {
	                  _this8.slideCallback(e.target.value);
	                },
	                onMouseDown: !this.state.isMobile ? function (e) {
	                  return _this8.sliderMousedownCallback(e);
	                } : undefined,
	                onTouchStart: this.state.isMobile ? function (e) {
	                  return _this8.sliderMousedownCallback(e);
	                } : undefined
	              })
	            )
	          )
	        )
	      );
	    }
	  }, {
	    key: 'renderQuiz',
	    value: function renderQuiz() {
	      var _this9 = this;

	      if (this.state.fetchingData) {
	        return _react2.default.createElement(
	          'div',
	          { className: 'quiz-container' },
	          _react2.default.createElement(
	            'div',
	            { className: 'loading-card', style: { position: 'absolute', width: '100%', height: '100%', backgroundColor: 'white', opacity: 1, zIndex: 500 } },
	            _react2.default.createElement(
	              'span',
	              { className: 'loading-text', style: { position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%,-50%)', textAlign: 'center' } },
	              'Fetching Questions ...'
	            )
	          )
	        );
	      } else {
	        var styles = {},
	            x = 140,
	            //(this.state.totalQuestions * 20) - 20,
	        y = 0 - 320,
	            z = 1 + 0.08,
	            questionsData = this.state.dataJSON.data.questions ? this.state.dataJSON.data.questions : [],
	            qCards = void 0;

	        qCards = questionsData.map(function (card, i) {
	          var style = {},
	              events = {};

	          style.zIndex = _this9.state.totalQuestions - i;
	          style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + x + ', ' + y + ', ' + z + ')';

	          if (i < 2) {
	            style.opacity = 1;
	          } else {
	            style.opacity = 0;
	          }

	          x = x - 20;
	          y = y - 320;
	          z = z + 0.08;

	          events.optionClick = function (e) {
	            return _this9.optionClicked(e);
	          };
	          if (_this9.state.isMobile) {
	            events.onTouchStart = function (e) {
	              return _touch2.default.swipeStart(e);
	            };
	            events.onTouchMove = function (e) {
	              return _touch2.default.swipeMove(e);
	            };
	            events.onTouchEnd = function (e) {
	              return _this9.touchEndHandler(e);
	            };
	          } else {
	            events.nextCard = function (e) {
	              return _this9.swipeCallback('up');
	            };
	          }

	          return _react2.default.createElement(_questionCards2.default, {
	            key: i,
	            cardNo: i,
	            questionNo: _this9.formatNumber(i + 1),
	            cardStyle: style,
	            cardData: _this9.state.dataJSON.data.questions[i],
	            cardEvents: events,
	            cardConfigs: _this9.state.dataJSON.mandatory_config,
	            languageTexts: _this9.state.languageTexts,
	            totalQuestions: _this9.formatNumber(_this9.state.totalQuestions),
	            isMobile: _this9.state.isMobile,
	            timerValue: _this9.calculateTime(_this9.state.timerCountValue)
	          });
	        });

	        return this.renderMainContainerContent(qCards);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      switch (this.props.mode) {
	        case 'laptop':
	          return this.renderQuiz();
	          break;
	        case 'mobile':
	          return this.renderQuiz();
	          break;
	        case 'tablet':
	          return this.renderQuiz();
	          break;
	      }
	    }
	  }]);

	  return Quiz;
	}(_react2.default.Component);

	exports.default = Quiz;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	module.exports = axios;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function groupBy(data, column) {
	  var grouped_data = {};
	  switch (typeof column === "undefined" ? "undefined" : _typeof(column)) {
	    case "string":
	      data.forEach(function (datum) {
	        if (grouped_data[datum[column]]) {
	          grouped_data[datum[column]].push(datum);
	        } else {
	          grouped_data[datum[column]] = [datum];
	        }
	      });
	      break;
	    case "function":
	      data.forEach(function (datum) {
	        var key = column(datum);
	        if (grouped_data[key]) {
	          grouped_data[key].push(datum);
	        } else {
	          grouped_data[key] = [datum];
	        }
	      });
	      break;
	  }
	  return grouped_data;
	}

	function getURLParam(name) {
	  var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
	  if (results == null) {
	    return null;
	  } else {
	    return results[1] || 0;
	  }
	}

	function multiLineTruncate(el) {
	  var wordArray = el.innerHTML.split(' ');
	  while (el.scrollHeight > el.offsetHeight) {
	    wordArray.pop();
	    el.innerHTML = wordArray.join(' ') + '...';
	  }
	}

	module.exports = {
	  groupBy: groupBy,
	  getURLParam: getURLParam,
	  multiLineTruncate: multiLineTruncate
	};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	'use strict';

	var touchStartCoords = { 'x': -1, 'y': -1 },
	    // X and Y coordinates on mousedown or touchstart events.
	touchEndCoords = { 'x': -1, 'y': -1 },
	    // X and Y coordinates on mouseup or touchend events.
	direction = 'undefined',
	    // Swipe direction
	minDistanceXAxis = 30,
	    // Min distance on mousemove or touchmove on the X axis
	maxDistanceYAxis = 30,
	    // Max distance on mousemove or touchmove on the Y axis
	minDistanceYAxis = 30,
	    // Min distance on mousemove or touchmove on the Y axis
	maxDistanceXAxis = 30,
	    // Max distance on mousemove or touchmove on the X axis
	maxAllowedTime = 1000,
	    // Max allowed time between swipeStart and swipeEnd
	startTime = 0,
	    // Time on swipeStart
	elapsedTime = 0; // Elapsed time between swipeStart and swipeEnd

	function swipeStart(e) {
	  e = e ? e : window.event;
	  e = 'changedTouches' in e ? e.changedTouches[0] : e;
	  touchStartCoords = { 'x': e.pageX, 'y': e.pageY };
	  startTime = new Date().getTime();
	}

	function swipeMove(e) {
	  e = e ? e : window.event;
	  e.preventDefault();
	}

	function swipeEnd(e, onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown) {
	  e = e ? e : window.event;
	  e = 'changedTouches' in e ? e.changedTouches[0] : e;
	  touchEndCoords = { 'x': e.pageX - touchStartCoords.x, 'y': e.pageY - touchStartCoords.y };
	  elapsedTime = new Date().getTime() - startTime;
	  if (elapsedTime <= maxAllowedTime) {
	    if (Math.abs(touchEndCoords.x) >= minDistanceXAxis && Math.abs(touchEndCoords.y) <= maxDistanceYAxis) {
	      direction = touchEndCoords.x < 0 ? 'left' : 'right';
	      switch (direction) {
	        case 'left':
	          onSwipeLeft(e);
	          break;
	        case 'right':
	          onSwipeRight(e);
	          break;
	      }
	    } else if (Math.abs(touchEndCoords.y) >= minDistanceYAxis && Math.abs(touchEndCoords.x) <= maxDistanceXAxis) {
	      direction = touchEndCoords.y < 0 ? 'up' : 'down';
	      switch (direction) {
	        case 'up':
	          onSwipeUp(e);
	          break;
	        case 'down':
	          onSwipeDown(e);
	          break;
	      }
	    }
	  }
	}

	module.exports = {
	  swipeStart: swipeStart,
	  swipeEnd: swipeEnd,
	  swipeMove: swipeMove
	};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(3);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var IntroductionCard = function (_React$Component) {
	  _inherits(IntroductionCard, _React$Component);

	  function IntroductionCard() {
	    _classCallCheck(this, IntroductionCard);

	    return _possibleConstructorReturn(this, (IntroductionCard.__proto__ || Object.getPrototypeOf(IntroductionCard)).apply(this, arguments));
	  }

	  _createClass(IntroductionCard, [{
	    key: "render",
	    value: function render() {

	      var buttonStyle = {},
	          introCardStyle = {},
	          introFrontStyle = {};

	      this.props.introCardConfigs.start_button_color ? buttonStyle.backgroundColor = this.props.introCardConfigs.start_button_color : undefined;
	      this.props.introCardConfigs.start_button_text_color ? buttonStyle.color = this.props.introCardConfigs.start_button_text_color : undefined;

	      introCardStyle.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, 160, 0, 1)";

	      if (this.props.introCardConfigs.background_image) {
	        introFrontStyle.backgroundImage = "url(" + this.props.introCardConfigs.background_image + ")";
	      }

	      return _react2.default.createElement(
	        "div",
	        { className: "intro-card", style: introCardStyle },
	        _react2.default.createElement(
	          "div",
	          { className: "content" },
	          _react2.default.createElement(
	            "div",
	            { className: "intro-front", style: introFrontStyle },
	            _react2.default.createElement("div", { className: "intro-gradient" }),
	            this.props.isMobile && _react2.default.createElement(
	              "div",
	              { className: "" + (this.props.introCardConfigs.background_image ? 'intro-content with-image' : 'intro-content') },
	              _react2.default.createElement(
	                "div",
	                { className: "" + (this.props.introCardConfigs.background_image && this.props.isMobile ? 'intro-header with-image' : 'intro-header') },
	                this.props.introCardConfigs.quiz_title
	              ),
	              _react2.default.createElement(
	                "div",
	                { className: "" + (this.props.introCardConfigs.background_image && this.props.isMobile ? 'intro-description with-image' : 'intro-description') },
	                this.props.introCardConfigs.introduction
	              ),
	              _react2.default.createElement(
	                "div",
	                { className: "intro-button-div" },
	                _react2.default.createElement(
	                  "button",
	                  { className: "intro-button", onClick: this.props.startQuiz, style: buttonStyle },
	                  this.props.introCardConfigs.start_button_text
	                )
	              )
	            ),
	            _react2.default.createElement(
	              "div",
	              { className: "credits", id: "credits" },
	              _react2.default.createElement(
	                "a",
	                { href: "https://pykih.com/open-tools/quizjs", target: "blank" },
	                "Created by : ICFJ | Pykih"
	              )
	            )
	          ),
	          _react2.default.createElement(
	            "div",
	            { className: "intro-back" },
	            _react2.default.createElement(
	              "div",
	              { className: "countdown-content" },
	              _react2.default.createElement(
	                "div",
	                { className: "countdown-text" },
	                "Starting your quiz in"
	              ),
	              _react2.default.createElement(
	                "div",
	                { className: "countdown-counter" },
	                "3"
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return IntroductionCard;
	}(_react2.default.Component);

	exports.default = IntroductionCard;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(3);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ResultCard = function (_React$Component) {
	  _inherits(ResultCard, _React$Component);

	  function ResultCard() {
	    _classCallCheck(this, ResultCard);

	    return _possibleConstructorReturn(this, (ResultCard.__proto__ || Object.getPrototypeOf(ResultCard)).apply(this, arguments));
	  }

	  _createClass(ResultCard, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      setTimeout(function () {
	        //twitter
	        window.twttr = function (d, s, id) {
	          var js,
	              fjs = d.getElementsByTagName(s)[0],
	              t = window.twttr || {};
	          if (d.getElementById(id)) return t;
	          js = d.createElement(s);
	          js.id = id;
	          js.src = "https://platform.twitter.com/widgets.js";
	          fjs.parentNode.insertBefore(js, fjs);

	          t._e = [];
	          t.ready = function (f) {
	            t._e.push(f);
	          };

	          return t;
	        }(document, "script", "twitter-wjs");
	        //fb
	        (function (d, s, id) {
	          var js,
	              fjs = d.getElementsByTagName(s)[0];
	          if (d.getElementById(id)) return;
	          js = d.createElement(s);js.id = id;
	          js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.8";
	          fjs.parentNode.insertBefore(js, fjs);
	        })(document, 'script', 'facebook-jssdk');
	      }, 500);
	    }
	  }, {
	    key: 'goBack',
	    value: function goBack(e) {
	      var conclusionCard = document.querySelector('.conclusion-card'),
	          conclusionFront = document.querySelector('.conclusion-front'),
	          conclusionBack = document.querySelector('.conclusion-back');
	      conclusionFront.style.display = 'block';
	      setTimeout(function (e) {
	        conclusionBack.style.display = 'none';
	      }, 100);
	      conclusionCard.classList.remove('clicked');
	    }
	  }, {
	    key: 'renderReadingLinks',
	    value: function renderReadingLinks() {
	      var _this2 = this;

	      var resultCardConfigs = this.props.resultCardConfigs,
	          isScoreSpecific = resultCardConfigs[0].upper_limit_of_score_range,
	          config = this.props.cardConfigs;

	      var links = void 0,
	          message = 'Thank you!';

	      if (config.quiz_type === "scoring" && isScoreSpecific) {
	        var scoreItem = resultCardConfigs.filter(function (e) {
	          return _this2.props.score <= e.upper_limit_of_score_range;
	        })[0];

	        if (scoreItem) {
	          message = scoreItem.message;

	          var relatedLinks = scoreItem.related_articles.length > 2 ? scoreItem.related_articles.slice(0, 2) : scoreItem.related_articles;

	          links = relatedLinks.map(function (d, i) {
	            return _react2.default.createElement(
	              'div',
	              { key: i, className: 'single-link-container' },
	              _react2.default.createElement(
	                'a',
	                { className: 'single-link', href: '' + d.related_article_links, target: 'blank' },
	                d.related_article_links ? _react2.default.createElement('img', { src: '' + d.link_image, className: 'link-img' }) : undefined,
	                _react2.default.createElement(
	                  'div',
	                  { className: 'link-info ' + (!d.related_article_links ? 'link-info-full-width' : '') },
	                  _react2.default.createElement(
	                    'div',
	                    { className: 'link-title' },
	                    d.link_description
	                  )
	                )
	              ),
	              _react2.default.createElement('div', { className: 'clearfix' })
	            );
	          });
	        }
	      } else {
	        resultCardConfigs.map(function (e) {
	          var relatedLinks = e.related_articles.length > 2 ? e.related_articles.slice(0, 2) : e.related_articles;
	          links = relatedLinks.map(function (d, i) {
	            return _react2.default.createElement(
	              'div',
	              { key: i, className: 'single-link-container' },
	              _react2.default.createElement(
	                'a',
	                { className: 'single-link', href: '' + d.related_article_links, target: 'blank' },
	                d.related_article_links ? _react2.default.createElement('img', { src: '' + d.link_image, className: 'link-img' }) : undefined,
	                _react2.default.createElement(
	                  'div',
	                  { className: 'link-info ' + (!d.related_article_links ? 'link-info-full-width' : '') },
	                  _react2.default.createElement(
	                    'div',
	                    { className: 'link-title' },
	                    d.link_description
	                  )
	                )
	              ),
	              _react2.default.createElement('div', { className: 'clearfix' })
	            );
	          });
	        });
	      }
	      return { links: links, message: message };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      var conclusionCardStyle = {};
	      var replayStyleCss = '',
	          revisitStyleCss = '',
	          shareStyleCss = '',
	          _renderReadingLinks = this.renderReadingLinks(),
	          links = _renderReadingLinks.links,
	          message = _renderReadingLinks.message;


	      conclusionCardStyle.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0.0005, 0, ' + (160 - (+this.props.totalQuestions + 1) * 20) + ', ' + (+this.props.totalQuestions + 1) * 320 * -1 + ', ' + (1 + 0.08 * (+this.props.totalQuestions + 1)) + ')';
	      if (+this.props.totalQuestions > 1) {
	        conclusionCardStyle.opacity = 0;
	      }

	      if (!this.props.cardConfigs.social_share) {
	        revisitStyleCss = 'half-size';
	      }

	      if (this.props.cardConfigs.revisit_answers === false && this.props.cardConfigs.social_share === false) {
	        replayStyleCss = 'full-size';
	      } else if (this.props.cardConfigs.revisit_answers === false || this.props.cardConfigs.social_share === false) {
	        replayStyleCss = 'half-size';
	      }

	      if (!this.props.cardConfigs.revisit_answers) {
	        shareStyleCss = 'half-size';
	      }

	      return _react2.default.createElement(
	        'div',
	        { className: 'conclusion-card', style: conclusionCardStyle },
	        _react2.default.createElement(
	          'div',
	          { className: 'content' },
	          _react2.default.createElement(
	            'div',
	            { className: 'conclusion-front' },
	            _react2.default.createElement(
	              'div',
	              { id: 'result_container', className: 'result-container' },
	              _react2.default.createElement('img', { className: 'result-img', src: './src/images/cup.png' }),
	              _react2.default.createElement(
	                'div',
	                { className: 'result-text' },
	                message
	              ),
	              this.props.cardConfigs.quiz_type === 'scoring' && _react2.default.createElement(
	                'div',
	                { className: 'result-score' },
	                this.props.cardConfigs.timer ? this.props.score + ' / ' + this.props.totalQuestions * this.props.cardConfigs.time_per_question : this.props.score + ' / ' + +this.props.totalQuestions
	              )
	            ),
	            _react2.default.createElement(
	              'div',
	              { id: 'buttons_container', className: 'buttons-container' },
	              this.props.cardConfigs.revisit_answers ? _react2.default.createElement(
	                'div',
	                { id: 'revisit', className: 'revisit card-button ' + revisitStyleCss, onClick: this.props.cardEvents.revisitAnswers },
	                _react2.default.createElement('img', { className: 'card-button-img', src: './src/images/revisit-icon.png' }),
	                _react2.default.createElement(
	                  'div',
	                  { className: 'card-button-text' },
	                  'Revisit Answers'
	                )
	              ) : undefined,
	              _react2.default.createElement(
	                'div',
	                { id: 'replay', className: 'replay card-button ' + replayStyleCss, onClick: this.props.cardEvents.resetQuiz },
	                _react2.default.createElement('img', { className: 'card-button-img', src: './src/images/replay.png' }),
	                _react2.default.createElement(
	                  'div',
	                  { className: 'card-button-text' },
	                  'Play Again'
	                )
	              ),
	              this.props.cardConfigs.social_share ? _react2.default.createElement(
	                'div',
	                { id: 'share', className: 'share card-button ' + shareStyleCss, onClick: this.props.cardEvents.socialShare },
	                _react2.default.createElement('img', { className: 'card-button-img', src: './src/images/share.png' }),
	                _react2.default.createElement(
	                  'div',
	                  { className: 'card-button-text' },
	                  'Share'
	                )
	              ) : undefined,
	              _react2.default.createElement('div', { className: 'clearfix' })
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'links-container' },
	              _react2.default.createElement(
	                'div',
	                { className: 'related-links-title' },
	                'RELATED ARTICLES'
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'related-links-content' },
	                links
	              )
	            ),
	            _react2.default.createElement(
	              'div',
	              { id: 'credits', className: 'credits' },
	              _react2.default.createElement(
	                'a',
	                { href: 'https://pykih.com/open-tools/quizjs', target: 'blank' },
	                'Created by : ICFJ | Pykih'
	              )
	            )
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'conclusion-back' },
	            _react2.default.createElement(
	              'div',
	              { className: 'share-card' },
	              _react2.default.createElement(
	                'div',
	                { className: 'share-image-div', style: { backgroundImage: 'url(\'' + this.props.introCardConfigs.background_image + '\')' } },
	                _react2.default.createElement(
	                  'div',
	                  { className: 'share-title', style: { color: 'white' } },
	                  this.props.introCardConfigs.quiz_title
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'share-msg' },
	                this.props.cardConfigs.share_msg.replace(/{score}/g, this.props.score)
	              )
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'share-buttons-div' },
	              _react2.default.createElement(
	                'div',
	                { className: 'fb-div' },
	                _react2.default.createElement(
	                  'div',
	                  {
	                    className: 'fb-share-button',
	                    'data-href': '' + this.props.cardConfigs.share_link,
	                    'data-layout': 'button',
	                    'data-size': 'large',
	                    'data-mobile-iframe': 'true' },
	                  _react2.default.createElement(
	                    'a',
	                    {
	                      className: 'fb-xfbml-parse-ignore',
	                      target: '_blank',
	                      href: 'https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdevelopers.facebook.com%2Fdocs%2Fplugins%2F&src=sdkpreparse' },
	                    'Share'
	                  )
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'twitter-div' },
	                _react2.default.createElement(
	                  'a',
	                  {
	                    className: 'twitter-share-button',
	                    href: 'https://twitter.com/intent/tweet?text=' + encodeURIComponent(this.props.cardConfigs.share_msg) + '&url=' + encodeURIComponent(this.props.cardConfigs.share_link),
	                    'data-size': 'large' },
	                  'Tweet'
	                )
	              ),
	              _react2.default.createElement('div', { className: 'clearfix' })
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'back-link', onClick: function onClick(e) {
	                  return _this3.goBack(e);
	                } },
	              'Go Back'
	            ),
	            _react2.default.createElement(
	              'div',
	              { id: 'credits', className: 'credits' },
	              _react2.default.createElement(
	                'a',
	                { href: 'https://pykih.com/open-tools/quizjs', target: 'blank' },
	                'Created by : ICFJ | Pykih'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return ResultCard;
	}(_react2.default.Component);

	exports.default = ResultCard;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(3);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var QuestionCard = function (_React$Component) {
	  _inherits(QuestionCard, _React$Component);

	  function QuestionCard() {
	    _classCallCheck(this, QuestionCard);

	    return _possibleConstructorReturn(this, (QuestionCard.__proto__ || Object.getPrototypeOf(QuestionCard)).apply(this, arguments));
	  }

	  _createClass(QuestionCard, [{
	    key: 'renderTimer',
	    value: function renderTimer() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'timer' },
	        _react2.default.createElement(
	          'span',
	          { className: 'timer-count' },
	          '' + this.props.timerValue.min,
	          ':',
	          +this.props.timerValue.sec < 6 ? _react2.default.createElement(
	            'span',
	            { className: 'danger' },
	            '' + this.props.timerValue.sec
	          ) : '' + this.props.timerValue.sec
	        ),
	        _react2.default.createElement('img', { className: 'timer-img', src: './src/images/clock-small.png' })
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var correctOption = void 0;
	      if (this.props.cardConfigs.quiz_type === "scoring") {
	        correctOption = this.props.cardData.options.filter(function (e) {
	          return e.right_or_wrong === true;
	        })[0].option;
	      }
	      return _react2.default.createElement(
	        'div',
	        {
	          className: this.props.cardNo === 0 ? 'question-card active' : 'question-card',
	          'data-order': this.props.cardNo,
	          style: this.props.cardStyle,
	          'data-card-type': this.props.cardType,
	          'data-isNavigable': '0'
	        },
	        _react2.default.createElement(
	          'div',
	          { className: 'content' },
	          _react2.default.createElement(
	            'div',
	            {
	              className: 'front',
	              onTouchStart: this.props.isMobile && !this.props.cardConfigs.flip_card ? this.props.cardEvents.onTouchStart : undefined,
	              onTouchMove: this.props.isMobile && !this.props.cardConfigs.flip_card ? this.props.cardEvents.onTouchMove : undefined,
	              onTouchEnd: this.props.isMobile && !this.props.cardConfigs.flip_card ? this.props.cardEvents.onTouchEnd : undefined
	            },
	            this.props.cardConfigs.quiz_type === "scoring" && this.props.cardConfigs.timer ? this.renderTimer() : undefined,
	            this.props.cardConfigs.quiz_type === "scoring" && this.props.cardConfigs.timer && !this.props.cardConfigs.flip_card ? _react2.default.createElement(
	              'div',
	              { className: 'timeout-msg' },
	              'Timed out!'
	            ) : undefined,
	            _react2.default.createElement(
	              'div',
	              { className: 'question-number' },
	              _react2.default.createElement(
	                'span',
	                { className: 'current-question' },
	                this.props.questionNo
	              ),
	              '/' + this.props.totalQuestions
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'question' },
	              this.props.cardData.question
	            ),
	            this.props.cardConfigs.quiz_type === "scoring" && !this.props.cardConfigs.flip_card ? _react2.default.createElement(
	              'div',
	              { id: 'title_' + (this.props.cardNo + 1), className: 'title' },
	              'ANSWER'
	            ) : undefined,
	            this.props.cardConfigs.quiz_type === "scoring" && !this.props.cardConfigs.flip_card ? _react2.default.createElement(
	              'div',
	              { className: 'answers-container' },
	              _react2.default.createElement(
	                'div',
	                { className: 'wrong-answer' },
	                _react2.default.createElement('span', { className: 'option-text' }),
	                _react2.default.createElement(
	                  'span',
	                  { className: 'cross-marker' },
	                  '\u2715'
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { id: 'correct_answer' + (this.props.cardNo + 1), className: 'correct-answer' },
	                _react2.default.createElement(
	                  'span',
	                  { className: 'option-text' },
	                  correctOption
	                ),
	                _react2.default.createElement(
	                  'span',
	                  { className: 'tick-marker' },
	                  '\u2713'
	                )
	              )
	            ) : _react2.default.createElement(
	              'div',
	              { className: 'answers-container' },
	              _react2.default.createElement('div', { className: 'correct-answer' })
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'option-container' },
	              this.props.cardData.options.map(function (d, i) {
	                return _react2.default.createElement(
	                  'div',
	                  {
	                    key: i,
	                    'data-option-id': i,
	                    className: 'option-div',
	                    onClick: _this2.props.cardEvents.optionClick },
	                  d.option
	                );
	              })
	            ),
	            this.props.isMobile ? _react2.default.createElement(
	              'div',
	              { className: 'swipe-hint-container', id: 'swipe_hint_container' },
	              _react2.default.createElement(
	                'div',
	                { className: 'swipe-hint-animation', id: 'swipe_hint_animation' },
	                _react2.default.createElement('img', { src: './src/images/swipe-up.gif' })
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'swipe-hint-msg', id: 'swipe_hint_msg' },
	                'Swipe up for next question'
	              )
	            ) : _react2.default.createElement(
	              'div',
	              { className: 'next-container' },
	              _react2.default.createElement(
	                'span',
	                { id: 'next', className: 'next', onClick: function onClick(e) {
	                    return _this2.props.cardEvents.nextCard(e);
	                  } },
	                'Next'
	              )
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'progress-bar' },
	              _react2.default.createElement('div', { className: 'progress-indicator', style: { width: +this.props.questionNo * 100 / +this.props.totalQuestions + "%" } })
	            ),
	            _react2.default.createElement(
	              'div',
	              { id: 'credits', className: 'credits' },
	              _react2.default.createElement(
	                'a',
	                { href: 'https://pykih.com/open-tools/quizjs', target: 'blank' },
	                'Created by : ICFJ | Pykih'
	              )
	            )
	          ),
	          !(this.props.cardConfigs.quiz_type === "scoring" && !this.props.cardConfigs.flip_card) && _react2.default.createElement(
	            'div',
	            {
	              className: 'back',
	              onTouchStart: this.props.isMobile && this.props.cardConfigs.flip_card ? this.props.cardEvents.onTouchStart : undefined,
	              onTouchMove: this.props.isMobile && this.props.cardConfigs.flip_card ? this.props.cardEvents.onTouchMove : undefined,
	              onTouchEnd: this.props.isMobile && this.props.cardConfigs.flip_card ? this.props.cardEvents.onTouchEnd : undefined
	            },
	            this.props.cardConfigs.quiz_type === "scoring" && this.props.cardConfigs.timer && _react2.default.createElement(
	              'div',
	              { className: 'timeout-msg' },
	              'Timed out!'
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'question-number' },
	              _react2.default.createElement(
	                'span',
	                { className: 'current-question' },
	                this.props.questionNo
	              ),
	              '/' + this.props.totalQuestions
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'title' },
	              this.props.cardData.question
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'gif-div' },
	              _react2.default.createElement('img', { className: 'gif' })
	            ),
	            this.props.cardConfigs.quiz_type === 'scoring' ? _react2.default.createElement(
	              'div',
	              { className: 'answers-container' },
	              _react2.default.createElement(
	                'div',
	                { className: 'wrong-answer' },
	                _react2.default.createElement('span', { className: 'option-text' }),
	                _react2.default.createElement(
	                  'span',
	                  { className: 'cross-marker' },
	                  '\u2715'
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'correct-answer' },
	                _react2.default.createElement(
	                  'span',
	                  { className: 'option-text' },
	                  correctOption
	                ),
	                _react2.default.createElement(
	                  'span',
	                  { className: 'tick-marker' },
	                  '\u2713'
	                )
	              )
	            ) : _react2.default.createElement(
	              'div',
	              { className: 'answers-container' },
	              _react2.default.createElement('div', { className: 'correct-answer' })
	            ),
	            _react2.default.createElement('div', { className: 'clear-both' }),
	            _react2.default.createElement('div', { className: 'answer' }),
	            _react2.default.createElement('div', { className: 'fact' }),
	            this.props.isMobile ? _react2.default.createElement(
	              'div',
	              { className: 'swipe-hint-container', id: 'swipe_hint_container' },
	              _react2.default.createElement(
	                'div',
	                { className: 'swipe-hint-animation', id: 'swipe_hint_animation' },
	                _react2.default.createElement('img', { src: './src/images/swipe-up.gif' })
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'swipe-hint-msg', id: 'swipe_hint_msg' },
	                'Swipe up for next question'
	              )
	            ) : _react2.default.createElement(
	              'div',
	              { className: 'next-container' },
	              _react2.default.createElement(
	                'span',
	                { id: 'next', className: 'next', onClick: function onClick(e) {
	                    return _this2.props.cardEvents.nextCard(e);
	                  } },
	                'Next'
	              )
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'progress-bar' },
	              _react2.default.createElement('div', { className: 'progress-indicator', style: { width: +this.props.questionNo * 100 / +this.props.totalQuestions + "%" } })
	            ),
	            _react2.default.createElement(
	              'div',
	              { id: 'credits', className: 'credits' },
	              _react2.default.createElement(
	                'a',
	                { href: 'https://pykih.com/open-tools/quizjs', target: 'blank' },
	                'Created by : ICFJ | Pykih'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return QuestionCard;
	}(_react2.default.Component);

	exports.default = QuestionCard;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(3);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _edit_quiz = __webpack_require__(12);

	var _edit_quiz2 = _interopRequireDefault(_edit_quiz);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	window.ProtoGraph = window.ProtoGraph || {};
	window.ProtoGraph.Card = window.ProtoGraph.Card || {};

	if (!NodeList.prototype.forEach) {
	  NodeList.prototype.forEach = Array.prototype.forEach;
	}

	ProtoGraph.Card.toQuiz.prototype.renderEdit = function (data) {
	  var _this = this;

	  this.mode = 'edit';
	  _reactDom2.default.render(_react2.default.createElement(_edit_quiz2.default, {
	    dataURL: this.options.data_url,
	    schemaURL: this.options.schema_url,
	    configURL: this.options.configuration_url,
	    configSchemaURL: this.options.configuration_schema_url,
	    uiSchemaURL: this.options.ui_schema_url,
	    mode: this.mode,
	    ref: function ref(e) {
	      _this.containerInstance = _this.containerInstance || e;
	    } }), this.options.selector);
	};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(3);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _axios = __webpack_require__(5);

	var _axios2 = _interopRequireDefault(_axios);

	var _utility = __webpack_require__(6);

	var _utility2 = _interopRequireDefault(_utility);

	var _quiz = __webpack_require__(4);

	var _quiz2 = _interopRequireDefault(_quiz);

	var _reactJsonschemaForm = __webpack_require__(13);

	var _reactJsonschemaForm2 = _interopRequireDefault(_reactJsonschemaForm);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var EditQuiz = function (_React$Component) {
	  _inherits(EditQuiz, _React$Component);

	  function EditQuiz(props) {
	    _classCallCheck(this, EditQuiz);

	    var _this = _possibleConstructorReturn(this, (EditQuiz.__proto__ || Object.getPrototypeOf(EditQuiz)).call(this, props));

	    _this.state = {
	      fetchingData: true,
	      dataJSON: {
	        data: {},
	        mandatory_config: {}
	      },
	      schemaJSON: {},
	      optionalConfigJSON: {},
	      optionalConfigSchemaJSON: {},
	      uiSchemaJSON: {},
	      step: 1
	    };
	    return _this;
	  }

	  _createClass(EditQuiz, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      if (this.state.fetchingData) {
	        _axios2.default.all([_axios2.default.get(this.props.dataURL), _axios2.default.get(this.props.schemaURL), _axios2.default.get(this.props.configURL), _axios2.default.get(this.props.configSchemaURL), _axios2.default.get(this.props.uiSchemaURL)]).then(_axios2.default.spread(function (cardData, cardSchema, optionalConfig, optionalConfigSchema, uiSchema) {
	          var stateVar = {
	            fetchingData: false,
	            dataJSON: cardData.data,
	            schemaJSON: cardSchema.data,
	            optionalConfigJSON: optionalConfig.data,
	            optionalConfigSchemaJSON: optionalConfigSchema.data,
	            uiSchemaJSON: uiSchema.data
	          };

	          stateVar.dataJSON.data.result_card_data = stateVar.dataJSON.data.result_card_data ? _this2.processResultData(stateVar.dataJSON.data.result_card_data, stateVar.dataJSON.mandatory_config.quiz_type) : undefined;
	          stateVar.totalQuestions = stateVar.dataJSON.data.questions.length;
	          stateVar.totalCards = stateVar.totalQuestions + 2;
	          stateVar.languageTexts = _this2.getLanguageTexts(stateVar.dataJSON.mandatory_config.language);

	          if (stateVar.dataJSON.mandatory_config.time_per_question) {
	            stateVar.timePerQuestion = stateVar.dataJSON.mandatory_config.time_per_question;
	            stateVar.timerCountValue = stateVar.dataJSON.mandatory_config.time_per_question;
	          }

	          _this2.setState(stateVar);
	        }));
	      }
	    }
	  }, {
	    key: 'processResultData',
	    value: function processResultData(resultCardData, quizType) {
	      var processedData = [];
	      if (quizType === "scoring" && resultCardData[0].upper_limit_of_score_range) {
	        var groupedData = _utility2.default.groupBy(resultCardData, "upper_limit_of_score_range"),
	            keys = Object.keys(groupedData);

	        keys.forEach(function (key) {
	          var tempObj = {};
	          groupedData[key].forEach(function (datum) {
	            if (Object.keys(tempObj).length) {
	              tempObj.related_articles.push({
	                "related_article_links": datum.related_article_links,
	                "link_description": datum.link_description,
	                "link_image": datum.link_image
	              });
	            } else {
	              tempObj = {
	                "upper_limit_of_score_range": datum.upper_limit_of_score_range,
	                "message": datum.message,
	                "related_articles": [{
	                  "related_article_links": datum.related_article_links,
	                  "link_description": datum.link_description,
	                  "link_image": datum.link_image
	                }]
	              };
	            }
	          });
	          processedData.push(tempObj);
	        });

	        processedData.sort(function (a, b) {
	          return a.upper_limit_of_score_range - b.upper_limit_of_score_range;
	        });

	        return processedData;
	      } else {
	        processedData.push({
	          "message": resultCardData[0].message,
	          "related_articles": resultCardData.map(function (datum) {
	            return {
	              "related_article_links": datum.related_article_links,
	              "link_description": datum.link_description,
	              "link_image": datum.link_image
	            };
	          })
	        });
	        return processedData;
	      }
	    }
	  }, {
	    key: 'getLanguageTexts',
	    value: function getLanguageTexts(languageConfig) {
	      var language = languageConfig ? languageConfig : "english",
	          text_obj = void 0;

	      switch (language.toLowerCase()) {
	        case "hindi":
	          text_obj = {
	            question_title: "प्रश्न ",
	            ans_title: "उत्तर",
	            restart: 'फिर से शुरू करें ↺',
	            next: 'अगला प्रश्न ➜',
	            // swipe: 'अगले प्रश्न के लिए दाईं ओर स्वाइप करें ➜'हाँ या ना
	            swipe: 'अगले प्रश्न के लिए दाईं या बाईं ओर स्वाइप करें ➜'
	          };
	          break;
	        default:
	          text_obj = {
	            question_title: "Question ",
	            ans_title: "ANSWER",
	            restart: 'Good Job! Take the quiz again?',
	            next: 'Next Question ➜',
	            swipe: 'Swipe on the card to continue ➜'
	          };
	          break;
	      }

	      if ((typeof text_obj === 'undefined' ? 'undefined' : _typeof(text_obj)) === "object") {
	        text_obj.next = text_obj.next;
	        text_obj.restart = text_obj.restart;
	        text_obj.swipe = text_obj.swipe;
	      }

	      return text_obj;
	    }
	  }, {
	    key: 'getSchemaJSON',
	    value: function getSchemaJSON() {
	      switch (this.state.step) {
	        case 1:
	          return this.state.schemaJSON.properties.mandatory_config;
	          break;
	        case 2:
	          return this.state.schemaJSON.properties.data.properties.basic_datapoints;
	          break;
	        case 3:
	          return this.state.schemaJSON.properties.data.properties.questions;
	          break;
	        case 4:
	          return this.state.schemaJSON.properties.data.properties.result_card_data;
	          break;
	        case 5:
	          return this.state.optionalConfigSchemaJSON;
	          break;
	      }
	    }
	  }, {
	    key: 'getFormData',
	    value: function getFormData() {
	      switch (this.state.step) {
	        case 1:
	          return this.state.dataJSON.mandatory_config;
	          break;
	        case 2:
	          return this.state.dataJSON.data.basic_datapoints;
	          break;
	        case 3:
	          return this.state.dataJSON.data.questions;
	          break;
	        case 4:
	          return this.state.dataJSON.data.result_card_data;
	          break;
	        case 5:
	          return this.state.optionalConfig;
	          break;
	      }
	    }
	  }, {
	    key: 'getUISchemaJSON',
	    value: function getUISchemaJSON() {
	      switch (this.state.step) {
	        case 1:
	          return this.state.uiSchemaJSON.mandatory_config;
	          break;
	        default:
	          return {};
	          break;
	      }
	    }
	  }, {
	    key: 'showLinkText',
	    value: function showLinkText() {
	      switch (this.state.step) {
	        case 1:
	          return '';
	          break;
	        case 2:
	          return '';
	          break;
	        case 3:
	          return '< Back';
	          break;
	        case 4:
	          return '< Back';
	          break;
	        case 5:
	          return '< Back';
	          break;
	      }
	    }
	  }, {
	    key: 'showButtonText',
	    value: function showButtonText() {
	      switch (this.state.step) {
	        case 1:
	          return 'Next';
	          break;
	        case 2:
	          return 'Next';
	          break;
	        case 3:
	          return 'Next';
	          break;
	        case 4:
	          return 'Next';
	          break;
	        case 5:
	          return 'Publish';
	          break;
	      }
	    }
	  }, {
	    key: 'onPrevHandler',
	    value: function onPrevHandler() {
	      this.setState(function (prevStep, prop) {
	        return {
	          step: --prevStep.step
	        };
	      });
	    }
	  }, {
	    key: 'onChangeHandler',
	    value: function onChangeHandler(_ref) {
	      var formData = _ref.formData;

	      switch (this.state.step) {
	        case 1:
	          this.setState(function (prevStep, prop) {
	            var dataJSON = prevStep.dataJSON;
	            dataJSON.mandatory_config = formData;
	            return {
	              dataJSON: dataJSON
	            };
	          });
	          break;
	        case 2:
	          this.setState(function (prevStep, prop) {
	            var dataJSON = prevStep.dataJSON;
	            dataJSON.data.basic_datapoints = formData;
	            return {
	              dataJSON: dataJSON
	            };
	          });
	          break;
	        case 3:
	          this.setState(function (prevStep, prop) {
	            var dataJSON = prevStep.dataJSON;
	            dataJSON.data.questions = formData;
	            return {
	              dataJSON: dataJSON,
	              totalQuestions: dataJSON.data.questions.length
	            };
	          });
	          break;
	        case 4:
	          this.setState(function (prevStep, prop) {
	            var dataJSON = prevStep.dataJSON;
	            dataJSON.data.result_card_data = formData;
	            return {
	              dataJSON: dataJSON
	            };
	          });
	          break;
	        case 5:
	          // this.setState((prevStep, prop) => {
	          //   let dataJSON = prevStep.dataJSON;
	          //   dataJSON.data.questions = formData;
	          //   return {
	          //     dataJSON: dataJSON
	          //   }
	          // });
	          break;
	      }
	    }
	  }, {
	    key: 'onSubmitHandler',
	    value: function onSubmitHandler(_ref2) {
	      var formData = _ref2.formData;

	      switch (this.state.step) {
	        case 1:
	          this.setState({
	            step: 2
	          });
	          break;
	        case 2:
	          this.setState({
	            step: 3
	          });
	          break;
	        case 3:
	          this.setState({
	            step: 4
	          });
	          break;
	        case 4:
	          this.setState({
	            step: 5
	          });
	          break;
	        case 5:
	          alert("The card is published");
	          break;
	      }
	    }
	  }, {
	    key: 'getRefreshFormData',
	    value: function getRefreshFormData() {
	      switch (this.state.step) {
	        case 1:
	          return JSON.parse(JSON.stringify(this.state.dataJSON.mandatory_config));
	          break;
	        case 2:
	          return JSON.parse(JSON.stringify(this.state.dataJSON.mandatory_config));
	          break;
	        case 3:
	          return JSON.parse(JSON.stringify(this.state.dataJSON.mandatory_config));
	          break;
	        case 4:
	          return JSON.parse(JSON.stringify(this.state.dataJSON.mandatory_config));
	          break;
	        case 5:
	          return JSON.parse(JSON.stringify(this.state.dataJSON.mandatory_config));
	          break;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      if (this.state.fetchingData) {
	        return _react2.default.createElement(
	          'div',
	          { className: 'quiz-container' },
	          _react2.default.createElement(
	            'div',
	            { className: 'loading-card', style: { position: 'absolute', width: '100%', height: '100%', backgroundColor: 'white', opacity: 1, zIndex: 500 } },
	            _react2.default.createElement(
	              'span',
	              { className: 'loading-text', style: { position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%,-50%)', textAlign: 'center' } },
	              'Fetching Questions ...'
	            )
	          )
	        );
	      } else {
	        console.log(_react2.default.createElement(_reactJsonschemaForm2.default, {
	          schema: this.getSchemaJSON(),
	          formData: this.getFormData(),
	          uiSchema: this.getUISchemaJSON(),
	          onSubmit: function onSubmit(e) {
	            return _this3.onSubmitHandler(e);
	          },
	          onChange: function onChange(e) {
	            return _this3.onChangeHandler(e);
	          }
	        }), this.getSchemaJSON(), this.getFormData(), this.getUISchemaJSON());
	        return _react2.default.createElement(
	          'div',
	          { className: 'col-sm-12' },
	          _react2.default.createElement('div', { className: 'col-sm-5' }),
	          _react2.default.createElement(
	            'div',
	            { className: 'col-sm-7' },
	            _react2.default.createElement(_quiz2.default, {
	              mode: 'laptop',
	              dataJSON: this.state.dataJSON,
	              schemaJSON: this.state.schemaJSON,
	              optionalConfigJSON: this.state.optionalConfigJSON,
	              optionalConfigSchemaJSON: this.state.optionalConfigSchemaJSON,
	              totalQuestions: this.state.totalQuestions,
	              totalCards: this.state.totalCards,
	              languageTexts: this.state.languageTexts,
	              timePerQuestion: this.state.timePerQuestion,
	              timerCountValue: this.state.timerCountValue
	            })
	          )
	        );
	      }
	    }
	  }]);

	  return EditQuiz;
	}(_react2.default.Component);

	exports.default = EditQuiz;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	module.exports = JSONSchemaForm;

/***/ })
/******/ ]);